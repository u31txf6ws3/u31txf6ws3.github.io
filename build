#!/usr/bin/env python3
from datetime import datetime
from hashlib import md5
from render import render_template as render
from pathlib import Path
from typing import Optional, Union, Iterator, Tuple, Dict, Iterable
from itertools import starmap
import re
import py2html
import sys


def format_date(date_str: str) -> str:
    date = datetime.strptime(date_str, "%Y-%m-%d")
    suffixes = {1:'st',2:'nd',3:'rd'}
    suffix = 'th' if 11 <= date.day <= 13 else suffixes.get(date.day % 10, 'th')
    return date.strftime("%B {}{}, %Y").format(date.day, suffix)


def file_hash(path: Union[str, Path]) -> str:
    path = Path(path)
    with open(path, "rb") as f:
        return md5(f.read()).hexdigest()


def output_hash(path: Union[str, Path]) -> Optional[str]:
    path = Path(path)
    if not path.is_file():
        return None
    with open(path) as f:
        *_, last = [""] + list(f)
    m = re.match(r"<!--([0-9a-f]+)-->", last)
    if not m:
        return None
    return m.groups()[0]


Post = str


def collect_posts(post_dir: Optional[Path] = None) -> Iterator[Tuple[str, Post, dict]]:
    post_dir = post_dir or Path(__file__).parent / "bodies"
    for post_path in post_dir.glob("*.py"):
        post, metadata = py2html.render_file(post_path)
        yield file_hash(post_path), post, metadata


def render_post(hash: str, post: str, metadata: dict, force: bool = False) -> dict:
    if hash == output_hash(metadata['OUTPUT']) and not force:
        print(f"Skipping Post: {metadata['TITLE']}")
        return metadata

    output = Path(metadata['OUTPUT'])
    print(f"Rendering Post: {metadata['TITLE']}")
    with open(metadata['OUTPUT'], 'w') as fout:
        metadata['PRETTY_DATE'] = format_date(metadata['DATE'])
        fout.write(render("templates/post.html", {"post": metadata}))
        fout.write(f"\n<!--{hash}-->")

    return metadata


def render_index(metadata: Iterable[dict], showall=False) -> None:
    print("Rendering index")
    visible_posts = sorted(
        [m for m in metadata if not m.get("HIDDEN") or showall],
        key=lambda p: p['DATE'],
        reverse=True
    )
    with open("index.html", 'w') as fout:
        fout.write(render("templates/index.html", {"posts": visible_posts}))


if __name__ == "__main__":
    force = "-f" in sys.argv
    all = "-a" in sys.argv
    render_index((render_post(h, p, m, force) for h, p, m in  collect_posts()), all)
